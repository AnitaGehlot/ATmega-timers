
timer_avr_COMPARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00000470  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cd  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000726  00000000  00000000  0000057d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025b  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000571  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a9  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000313  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8a:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:

//The output compate interrupt handler
//We set up the timer in such a way that
//this ISR is called exactly at 1ms interval
ISR(TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
   clock_millisecond++;
  a2:	80 91 7e 00 	lds	r24, 0x007E
  a6:	90 91 7f 00 	lds	r25, 0x007F
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	90 93 7f 00 	sts	0x007F, r25
  b0:	80 93 7e 00 	sts	0x007E, r24
   if(clock_millisecond==1000)
  b4:	80 91 7e 00 	lds	r24, 0x007E
  b8:	90 91 7f 00 	lds	r25, 0x007F
  bc:	88 5e       	subi	r24, 0xE8	; 232
  be:	93 40       	sbci	r25, 0x03	; 3
  c0:	a1 f4       	brne	.+40     	; 0xea <__vector_7+0x58>
   {
      clock_second++;
  c2:	80 91 80 00 	lds	r24, 0x0080
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 80 00 	sts	0x0080, r24
      clock_millisecond=0;
  cc:	10 92 7f 00 	sts	0x007F, r1
  d0:	10 92 7e 00 	sts	0x007E, r1
      if(clock_second==60)
  d4:	80 91 80 00 	lds	r24, 0x0080
  d8:	8c 33       	cpi	r24, 0x3C	; 60
  da:	39 f4       	brne	.+14     	; 0xea <__vector_7+0x58>
      {
         clock_minute++;
  dc:	80 91 81 00 	lds	r24, 0x0081
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 81 00 	sts	0x0081, r24
         clock_second=0;
  e6:	10 92 80 00 	sts	0x0080, r1
      }
   }
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:
volatile unsigned char  clock_second=0;

volatile unsigned char  clock_minute=0;

main()
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
   //Initialize the LCD Subsystem
   InitLCD(LS_BLINK);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 11 01 	call	0x222	; 0x222 <InitLCD>
   //Clear the display
   LCDClear();
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>

   //Set up the timer1 as described in the
   //tutorial

   TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
 110:	8b e0       	ldi	r24, 0x0B	; 11
 112:	8e bd       	out	0x2e, r24	; 46
   OCR1A=250;
 114:	8a ef       	ldi	r24, 0xFA	; 250
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9b bd       	out	0x2b, r25	; 43
 11a:	8a bd       	out	0x2a, r24	; 42

   //Enable the Output Compare A interrupt
   TIMSK|=(1<<OCIE1A);
 11c:	89 b7       	in	r24, 0x39	; 57
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	89 bf       	out	0x39, r24	; 57


   LCDWriteStringXY(0,0,"Time Base Demo");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	0e 94 ad 01 	call	0x35a	; 0x35a <LCDGotoXY>
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 41 01 	call	0x282	; 0x282 <LCDWriteString>
   LCDWriteStringXY(0,1,"  :   (MM:SS)");
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 ad 01 	call	0x35a	; 0x35a <LCDGotoXY>
 13a:	8f e6       	ldi	r24, 0x6F	; 111
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 41 01 	call	0x282	; 0x282 <LCDWriteString>

   //Enable interrupts globally

   sei();
 142:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0

   //Continuasly display the time
   while(1)
   {
      LCDWriteIntXY(0,1,clock_minute,2);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	0e 94 ad 01 	call	0x35a	; 0x35a <LCDGotoXY>
 150:	80 91 81 00 	lds	r24, 0x0081
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 4f 01 	call	0x29e	; 0x29e <LCDWriteInt>
      LCDWriteIntXY(3,1,clock_second,2);
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 ad 01 	call	0x35a	; 0x35a <LCDGotoXY>
 166:	80 91 80 00 	lds	r24, 0x0080
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 4f 01 	call	0x29e	; 0x29e <LCDWriteInt>
 174:	ce 01       	movw	r24, r28
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x7c>
 17a:	e6 cf       	rjmp	.-52     	; 0x148 <main+0x4e>

0000017c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 17c:	84 b3       	in	r24, 0x14	; 20
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 182:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 184:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	35 e0       	ldi	r19, 0x05	; 5
 190:	97 9a       	sbi	0x12, 7	; 18
 192:	82 2f       	mov	r24, r18
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 198:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 19a:	82 95       	swap	r24
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	92 2f       	mov	r25, r18
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1a4:	97 98       	cbi	0x12, 7	; 18
 1a6:	93 2f       	mov	r25, r19
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 1ac:	97 9a       	sbi	0x12, 7	; 18
 1ae:	92 2f       	mov	r25, r18
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1b4:	93 b3       	in	r25, 0x13	; 19
 1b6:	92 2f       	mov	r25, r18
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1bc:	97 98       	cbi	0x12, 7	; 18
 1be:	93 2f       	mov	r25, r19
 1c0:	9a 95       	dec	r25
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 1c4:	87 fd       	sbrc	r24, 7
 1c6:	e4 cf       	rjmp	.-56     	; 0x190 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 1c8:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1ca:	84 b3       	in	r24, 0x14	; 20
 1cc:	8f 60       	ori	r24, 0x0F	; 15
 1ce:	84 bb       	out	0x14, r24	; 20

}
 1d0:	08 95       	ret

000001d2 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1d2:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1d4:	66 23       	and	r22, r22
 1d6:	11 f4       	brne	.+4      	; 0x1dc <LCDByte+0xa>
	CLEAR_RS();
 1d8:	96 98       	cbi	0x12, 6	; 18
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCDByte+0xc>
else
	SET_RS();
 1dc:	96 9a       	sbi	0x12, 6	; 18
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 1e4:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	92 2f       	mov	r25, r18
 1ea:	92 95       	swap	r25
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1f2:	95 bb       	out	0x15, r25	; 21
 1f4:	95 e0       	ldi	r25, 0x05	; 5
 1f6:	89 2f       	mov	r24, r25
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1fc:	97 98       	cbi	0x12, 7	; 18
 1fe:	89 2f       	mov	r24, r25
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 204:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 206:	85 b3       	in	r24, 0x15	; 21
 208:	2f 70       	andi	r18, 0x0F	; 15
 20a:	80 7f       	andi	r24, 0xF0	; 240
 20c:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 20e:	85 bb       	out	0x15, r24	; 21
 210:	89 2f       	mov	r24, r25
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 216:	97 98       	cbi	0x12, 7	; 18
 218:	9a 95       	dec	r25
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 21c:	0e 94 be 00 	call	0x17c	; 0x17c <LCDBusyLoop>
}
 220:	08 95       	ret

00000222 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 222:	1f 93       	push	r17
 224:	18 2f       	mov	r17, r24
 226:	8c e2       	ldi	r24, 0x2C	; 44
 228:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22a:	20 e9       	ldi	r18, 0x90	; 144
 22c:	31 e0       	ldi	r19, 0x01	; 1
 22e:	f9 01       	movw	r30, r18
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <InitLCD+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 234:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	d9 f7       	brne	.-10     	; 0x22e <InitLCD+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 238:	84 b3       	in	r24, 0x14	; 20
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 23e:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 240:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 242:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 244:	85 b3       	in	r24, 0x15	; 21
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 24a:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 24c:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 24e:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <InitLCD+0x30>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 256:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 258:	a9 9a       	sbi	0x15, 1	; 21
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	98 2f       	mov	r25, r24
 25e:	9a 95       	dec	r25
 260:	f1 f7       	brne	.-4      	; 0x25e <InitLCD+0x3c>
	_delay_us(1);
	CLEAR_E();
 262:	97 98       	cbi	0x12, 7	; 18
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <InitLCD+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 268:	0e 94 be 00 	call	0x17c	; 0x17c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 26c:	81 2f       	mov	r24, r17
 26e:	8c 60       	ori	r24, 0x0C	; 12
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>
}
 27e:	1f 91       	pop	r17
 280:	08 95       	ret

00000282 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
 288:	04 c0       	rjmp	.+8      	; 0x292 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>
	msg++;
 290:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 292:	88 81       	ld	r24, Y
 294:	88 23       	and	r24, r24
 296:	c9 f7       	brne	.-14     	; 0x28a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <LCDWriteInt+0xe>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <LCDWriteInt+0x10>
 2ae:	0f 92       	push	r0
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	9c 01       	movw	r18, r24
 2b6:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2b8:	fe 01       	movw	r30, r28
 2ba:	31 96       	adiw	r30, 0x01	; 1
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	df 01       	movw	r26, r30
 2c0:	1d 92       	st	X+, r1
 2c2:	8a 95       	dec	r24
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <LCDWriteInt+0x22>
 2c6:	fe 01       	movw	r30, r28
 2c8:	35 96       	adiw	r30, 0x05	; 5
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2cc:	c9 01       	movw	r24, r18
 2ce:	6a e0       	ldi	r22, 0x0A	; 10
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	0e 94 b6 01 	call	0x36c	; 0x36c <__divmodhi4>
 2d6:	80 83       	st	Z, r24
	val=val/10;
 2d8:	c9 01       	movw	r24, r18
 2da:	6a e0       	ldi	r22, 0x0A	; 10
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 b6 01 	call	0x36c	; 0x36c <__divmodhi4>
 2e2:	9b 01       	movw	r18, r22
 2e4:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2e6:	21 15       	cp	r18, r1
 2e8:	31 05       	cpc	r19, r1
 2ea:	81 f7       	brne	.-32     	; 0x2cc <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2ec:	bf ef       	ldi	r27, 0xFF	; 255
 2ee:	0f 3f       	cpi	r16, 0xFF	; 255
 2f0:	1b 07       	cpc	r17, r27
 2f2:	79 f4       	brne	.+30     	; 0x312 <LCDWriteInt+0x74>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2f8:	ae 01       	movw	r20, r28
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <LCDWriteInt+0x66>
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	fa 01       	movw	r30, r20
 306:	e2 0f       	add	r30, r18
 308:	f3 1f       	adc	r31, r19
 30a:	80 81       	ld	r24, Z
 30c:	88 23       	and	r24, r24
 30e:	c1 f3       	breq	.-16     	; 0x300 <LCDWriteInt+0x62>
 310:	04 c0       	rjmp	.+8      	; 0x31a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 312:	25 e0       	ldi	r18, 0x05	; 5
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	20 1b       	sub	r18, r16
 318:	31 0b       	sbc	r19, r17
 31a:	7e 01       	movw	r14, r28
 31c:	08 94       	sec
 31e:	e1 1c       	adc	r14, r1
 320:	f1 1c       	adc	r15, r1
 322:	e2 0e       	add	r14, r18
 324:	f3 1e       	adc	r15, r19
 326:	89 01       	movw	r16, r18
 328:	09 c0       	rjmp	.+18     	; 0x33c <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 32a:	f7 01       	movw	r30, r14
 32c:	81 91       	ld	r24, Z+
 32e:	7f 01       	movw	r14, r30
 330:	80 5d       	subi	r24, 0xD0	; 208
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	05 30       	cpi	r16, 0x05	; 5
 33e:	11 05       	cpc	r17, r1
 340:	a4 f3       	brlt	.-24     	; 0x32a <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	08 95       	ret

0000035a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 35a:	88 32       	cpi	r24, 0x28	; 40
 35c:	30 f4       	brcc	.+12     	; 0x36a <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 35e:	61 11       	cpse	r22, r1
 360:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 362:	80 68       	ori	r24, 0x80	; 128
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDByte>
 36a:	08 95       	ret

0000036c <__divmodhi4>:
 36c:	97 fb       	bst	r25, 7
 36e:	09 2e       	mov	r0, r25
 370:	07 26       	eor	r0, r23
 372:	0a d0       	rcall	.+20     	; 0x388 <__divmodhi4_neg1>
 374:	77 fd       	sbrc	r23, 7
 376:	04 d0       	rcall	.+8      	; 0x380 <__divmodhi4_neg2>
 378:	0c d0       	rcall	.+24     	; 0x392 <__udivmodhi4>
 37a:	06 d0       	rcall	.+12     	; 0x388 <__divmodhi4_neg1>
 37c:	00 20       	and	r0, r0
 37e:	1a f4       	brpl	.+6      	; 0x386 <__divmodhi4_exit>

00000380 <__divmodhi4_neg2>:
 380:	70 95       	com	r23
 382:	61 95       	neg	r22
 384:	7f 4f       	sbci	r23, 0xFF	; 255

00000386 <__divmodhi4_exit>:
 386:	08 95       	ret

00000388 <__divmodhi4_neg1>:
 388:	f6 f7       	brtc	.-4      	; 0x386 <__divmodhi4_exit>
 38a:	90 95       	com	r25
 38c:	81 95       	neg	r24
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	08 95       	ret

00000392 <__udivmodhi4>:
 392:	aa 1b       	sub	r26, r26
 394:	bb 1b       	sub	r27, r27
 396:	51 e1       	ldi	r21, 0x11	; 17
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <__udivmodhi4_ep>

0000039a <__udivmodhi4_loop>:
 39a:	aa 1f       	adc	r26, r26
 39c:	bb 1f       	adc	r27, r27
 39e:	a6 17       	cp	r26, r22
 3a0:	b7 07       	cpc	r27, r23
 3a2:	10 f0       	brcs	.+4      	; 0x3a8 <__udivmodhi4_ep>
 3a4:	a6 1b       	sub	r26, r22
 3a6:	b7 0b       	sbc	r27, r23

000003a8 <__udivmodhi4_ep>:
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	5a 95       	dec	r21
 3ae:	a9 f7       	brne	.-22     	; 0x39a <__udivmodhi4_loop>
 3b0:	80 95       	com	r24
 3b2:	90 95       	com	r25
 3b4:	bc 01       	movw	r22, r24
 3b6:	cd 01       	movw	r24, r26
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
