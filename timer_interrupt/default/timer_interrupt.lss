
timer_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002a  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ab  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000079  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ff  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a4  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
#define TIMER_CLOCK       2     // LED flashing frequency in 1Hz

static volatile uint8_t led;     // use volatile when variable is accessed from interrupts

ISR(TIMER1_COMPA_vect)    // handler for Output Compare 1 overflow interrupt
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
    PORTB = led;
  88:	80 91 60 00 	lds	r24, 0x0060
  8c:	88 bb       	out	0x18, r24	; 24
    led <<= 1;                   // move to next LED 
  8e:	80 91 60 00 	lds	r24, 0x0060
  92:	88 0f       	add	r24, r24
  94:	80 93 60 00 	sts	0x0060, r24
    if (!led)                    // overflow: start with bit 0 again 
  98:	80 91 60 00 	lds	r24, 0x0060
  9c:	88 23       	and	r24, r24
  9e:	19 f4       	brne	.+6      	; 0xa6 <__vector_7+0x2a>
        led = 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:

int main(void)
{
    DDRB  = 0xff;                // use all pins on PortB for output 
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0xff;                // and turn off all LEDs
  b6:	88 bb       	out	0x18, r24	; 24
    TCCR1B = _BV(CS10) | _BV(CS11)  | _BV(WGM12); // prescaler=64, clear timer/counter on compareA match 
  b8:	8b e0       	ldi	r24, 0x0B	; 11
  ba:	8e bd       	out	0x2e, r24	; 46
    OCR1A = ((XTAL/2/64/TIMER_CLOCK) - 1 );
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	9d e3       	ldi	r25, 0x3D	; 61
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
    // enable Output Compare 1 overflow interrupt
    TIMSK  = _BV(OCIE1A);
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	89 bf       	out	0x39, r24	; 57
    led = 1;                     // init variable representing the LED state 
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 60 00 	sts	0x0060, r24
    sei();                       // enable interrupts 
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x1e>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
